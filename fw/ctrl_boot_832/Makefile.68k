BASE	= m68k-elf
CC      = $(BASE)-gcc
LD      = $(BASE)-gcc
AS = vasmm68k_mot
CP      = $(BASE)-objcopy
DUMP    = $(BASE)-objdump

ROMGEN = ../romgen/romgen

# we use mincrt0.s from here
STARTUP_DIR = .

# we fetch ROM prologue / epilogue from here
RTL_DIR = ../romgen/

# we use printf from here
COMMON_DIR = ../OSD/.

BUILD_DIR=m68k_obj
HWBUILD_DIR=m68k_obj_hw

MINSTARTUP_SRC = $(STARTUP_DIR)/start68k.s
MINSTARTUP_OBJ = $(patsubst $(STARTUP_DIR)/%.s,$(BUILD_DIR)/%.o,$(MINSTARTUP_SRC))

COMMON_SRC = $(COMMON_DIR)/small_printf.c $(COMMON_DIR)/swap.c $(COMMON_DIR)/swap.h
COMMON_OBJ = $(patsubst $(COMMON_DIR)/%.c,$(BUILD_DIR)/%.o,$(COMMON_SRC))

HW_SRC = fpga.c fpga.h spi.c spi.h uart.c
HW_OBJ = $(patsubst %.c,$(HWBUILD_DIR)/%.o,$(HW_SRC))

MAIN_PRJ = OSDBoot_68k
MAIN_SRC = boot.c minfat.c minfat.h checksum.c checksum.h hexdump.c
MAIN_OBJ = $(COMMON_OBJ) $(HW_OBJ) $(patsubst %.c,$(BUILD_DIR)/%.o,$(MAIN_SRC))

LINKMAP  = linkscript_68k.ld


# Commandline options for each tool.

CFLAGS  = -Dprg_start=0x2000 -DOSDNAME=\"OSD_CA01SYS\" -DNULL=0 -I. -I$(COMMON_DIR)/ -g -c -Os -m68000 -DDISABLE_UART_RX -DPRINTF_HEX_ONLY # -DDISABLE_PRINTF -DDISABLE_UART_TX -

# We need to compile the bit-banging stuff with storeh/storeb support.
CFLAGS_HW  = -I. -I$(COMMON_DIR)/ -g -c -Os -m68000 -ffunction-sections -DDISABLE_UART_RX -DPRINTF_HEX_ONLY # -DDISABLE_PRINTF -DDISABLE_UART_TX

LFLAGS  = -Wl,--gc-sections -nostartfiles -nostdlib -Wl,--relax -Os
LIBS = -lgcc

# Our target.
all: $(BUILD_DIR) $(HWBUILD_DIR) $(MAIN_PRJ).bin $(MAIN_PRJ)_ROM.vhd $(MAIN_PRJ).rpt

clean:
	rm -f $(BUILD_DIR)/*.o *.hex *.elf *.map *.lst *.srec $(MAIN_PRJ).rom *~ */*.o *.bin


# Convert ELF binary to bin file.
%.bin: %.elf
	$(CP) -O binary $< $@

%.rpt: %.elf
	echo >$@ -n "End of code:\t"
	$(DUMP) -x $< | grep >>$@ _romend
	echo >>$@ -n "Start of BSS:\t"
	$(DUMP) -x $< | grep  >>$@ __bss_start__
	echo >>$@ -n "End of BSS:\t"
	$(DUMP) -x $< | grep >>$@ __bss_end__
	cat $@

$(ROMGEN): ../romgen/romgen.c
	make -C ../romgen/

%_ROM.vhd: %.bin $(ROMGEN)
	sed 's/soc_firmware/$*_ROM/' >$*_ROM.vhd <$(RTL_DIR)/rom_prologue.vhd
	$(ROMGEN) $*.bin >>$*_ROM.vhd
	cat >>$*_ROM.vhd $(RTL_DIR)/rom_epilogue.vhd

# Link - this produces an ELF binary.

$(MAIN_PRJ).elf: $(MINSTARTUP_OBJ) $(MAIN_OBJ)
	$(LD) $(LFLAGS) -T $(LINKMAP) -o $@ $+ $(LIBS)

$(BUILD_DIR)/%.o: %.c Makefile.68k
	$(CC) $(CFLAGS)  -o $@ -c $<

$(BUILD_DIR)/%.o: $(COMMON_DIR)/%.c Makefile.68k
	$(CC) $(CFLAGS)  -o $@ -c $<

$(HWBUILD_DIR)/%.o: $(COMMON_DIR)/%.c Makefile.68k
	$(CC) $(CFLAGS_HW)  -o $@ -c $<

$(HWBUILD_DIR)/%.o: %.c Makefile.68k
	$(CC) $(CFLAGS_HW)  -o $@ -c $<

$(BUILD_DIR)/%.o: %.s
	$(AS) -m68000 -Felf -o $@ $<

$(BUILD_DIR)/%.o: $(STARTUP_DIR)/%.s
	$(AS) -m68000 -Felf -o $@ $<

$(BUILD_DIR):
	mkdir $(BUILD_DIR)

$(HWBUILD_DIR):
	mkdir $(HWBUILD_DIR)

